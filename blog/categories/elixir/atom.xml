<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: elixir | holsee]]></title>
  <link href="http://holsee.github.io/blog/categories/elixir/atom.xml" rel="self"/>
  <link href="http://holsee.github.io/"/>
  <updated>2015-04-28T17:00:45+01:00</updated>
  <id>http://holsee.github.io/</id>
  <author>
    <name><![CDATA[holsee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ElixirConfEU - Elixir Processes in 3D]]></title>
    <link href="http://holsee.github.io/elixirconfeu-elixir-procs-in-3d/"/>
    <updated>2015-04-28T16:06:04+01:00</updated>
    <id>http://holsee.github.io/elixirconfeu-elixir-procs-in-3d</id>
    <content type="html"><![CDATA[<p>I gave a lightning talk at <a href="http://ElixirConf.eu">ElixirConfEU</a> on Visualizing Elixir Processes in 3D.</p>

<p><img class="center" src="/images/exconfeu/elixirconf_lightning_talk.jpg"></p>

<p>A few nights before travelling to Krakow I had watched a video by <a href="https://github.com/krestenkrab/">Kresten Krab Thorup</a> on his project <a href="https://github.com/krestenkrab/erlubi">Erlubi</a> which transmits basic details of the Erlang VM to a <a href="http://ubietylab.net">Ubigrpah Server</a>.</p>

<p>I started to use this to inspect Erlang projects, and play about with OTP Supervisor trees and how they looked in 3D.</p>

<p>I decided to go about using this from elixir.  It doesn&rsquo;t take much to use from elixir; if you want to visualize your own project simply cherry pick the steps 1, 3, 6 and 7 below.</p>

<p><em>1</em> Download the Ubigraph server from <a href="http://ubietylab.net">ubietylab.net</a>. Unpack it and just run the command line tool bin/ubigraph_server. A black window will appear.</p>

<p><em>2</em> Create a new elixir project <code>mix new lightning_ex</code> and cd into directory.</p>

<p><em>3</em> Add Erlubi as a dependency to the mix.exs file:</p>

<p><code>elixir
defp deps do
  [{:erlubi, github: "krestenkrab/erlubi"}]
end
</code></p>

<p><em>4</em> Add some code to ex_lightning.ex to generate linked and unlinking procs</p>

<p>``` elixir
defmodule ExLightning do
  def start_linked(n) do</p>

<pre><code>for _ &lt;- 1..n do
  Task.start_link(fn -&gt; 
    :timer.sleep(1000)
  end)
end 
</code></pre>

<p>  end</p>

<p>  def start(n) do</p>

<pre><code>for _ &lt;- 1..n do
  Task.start(fn -&gt; 
    :timer.sleep(1000)
  end)
end 
</code></pre>

<p>  end
end
```</p>

<p><em>5</em> In terminal fetch dependencies and compile with <code>mix do deps.get, compile</code></p>

<p><em>6</em> In terminal iex session loading in project with <code>iex -S mix</code></p>

<p><em>7</em> In iex session start Erlubi tracer with <code>:erlubi_tracer.run</code>.  If you get an error ensure you started ubigraph_server as described in step 1. At this point you should see the vanilla elixir system visualized in 3D like so:</p>

<p><img class="center" src="/images/exconfeu/erlubi_vanilla.png"></p>

<p><em>8</em> run <code>ExLightning.start 5000</code> which will create 5000 unlinked processes (unbound red spheres)</p>

<p><img class="center" src="/images/exconfeu/erlubi_unlinked.png"></p>

<p><em>9</em> run <code>ExLightning.start_linked 5000</code> which will create 5000 linked processes, which will be linked to the creating process.</p>

<p><img class="center" src="/images/exconfeu/erlubi_linked.png"></p>

<p>Full source code can be found here: <a href="https://github.com/holsee/lightning_ex">https://github.com/holsee/lightning_ex</a></p>

<p>Have fun :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Elixir is about @ Erlang Factory SF 2015]]></title>
    <link href="http://holsee.github.io/what-elixir-is-about-at-erlang-factory-sf-2015/"/>
    <updated>2015-04-02T10:57:45+01:00</updated>
    <id>http://holsee.github.io/what-elixir-is-about-at-erlang-factory-sf-2015</id>
    <content type="html"><![CDATA[<p>Much more than an introduction to the elixir language, the philosophy and design choices are examined in this talk by <a href="https://twitter.com/josevalim">José Valim</a>.</p>

<p>Even for the seasoned elixir wrangler this is a very interesting watch, as José discusses the kind of citizen elixir wants to be in the Erlang ecosystem.</p>

<p><div class='embed-video-container'><iframe src='http://www.youtube.com/embed/Lqo9-pQuRKE' frameborder='0' allowfullscreen></iframe></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A taste of elixir at Functional Kats Belfast]]></title>
    <link href="http://holsee.github.io/a-taste-of-elixir/"/>
    <updated>2015-03-13T12:02:36+00:00</updated>
    <id>http://holsee.github.io/a-taste-of-elixir</id>
    <content type="html"><![CDATA[<p>I recently gave a presentation to <a href="http://www.meetup.com/Functional-Kats-Belfast/">Functional Kats (Belfast)</a> on the elixir language.  It was a lot of fun!</p>

<p>The format of the event I totally love, it started with a couple of talks followed by a Kata hack where we all had a go at implementing the Luhn Credit Card algo in the functional programming language of our choice.  At the end we all took turns to present our solutions.</p>

<p>The goal of my talk was to arm the folks with enough of the basics to implement the Kata in elixir.</p>

<p><img src="/images/me_at_func_kats.jpeg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir, BEAM and OTP]]></title>
    <link href="http://holsee.github.io/elixir-beam-otp/"/>
    <updated>2014-12-29T14:25:42+00:00</updated>
    <id>http://holsee.github.io/elixir-beam-otp</id>
    <content type="html"><![CDATA[<p><em>As I plan to write and speak about Elixir on my blog and hopefully at some meet-ups soon, I though I would write a short post with handy descriptions of some of the key aspects that I can reference in one place&hellip;</em></p>

<h3>What is Elixir?</h3>

<p>Think Dave Thomas describes it best&hellip;</p>

<p>&ldquo;The Elixir Programming Language wraps functional programming with immutable state and an actor-based approach to concurrency in a tidy modern syntax.  And it runs on the industrial-strength, high-performance, distributed Erlang VM.&rdquo;</p>

<p>It has very powerful meta-programming capabilities through compile time expansion of macros and the dynamic power of the language.  A good example of the developer productivity that can be gained is their use in the <a href="http://www.phoenixframework.org/v0.7.2/docs/routing">routing system in the phoenix web framework</a>. When learning about Elixir macros I found the &lsquo;<a href="http://www.theerlangelist.com/2014/06/understanding-elixir-macros-part-1.html">Understanding Elixir Macros Series</a>&rsquo; by <a href="https://twitter.com/sasajuric">Saša Jurić</a> to be very useful.</p>

<h3>What is the Erlang VM &amp; BEAM?</h3>

<p>The &ldquo;Erlang VM&rdquo; is the name of the virtual machine where all Erlang code is executed. Every compiled Erlang file has the suffix .beam.</p>

<p>There is also an implementation of Erlang which runs on the JVM, called <a href="https://github.com/krestenkrab/erjang/wiki">Erjang</a>, but I guess the less said about that the better as the Erlang VM is really the awesome part if you ask me.</p>

<p>When you compile Elixir code it is converted to .beam format, which allows it to be executed on the Erlang VM.</p>

<h3>What is OTP?</h3>

<p>OTP is set of Erlang libraries and design principles providing middle-ware to develop these systems. It includes its own distributed database, applications to interface towards other languages, debugging and release handling tools.</p>

<p>The OTP libraries (and the associated best practices to an extent) are mature, battle hardened and hide much of the boilerplate code required to perform common patterns such as creating a server to store state, recover from failures through supervision trees and so much more.</p>

<p>I look forward to writing about this with examples in future as I learn more about OTP myself.</p>

<p><em>Where is OTP used?</em></p>

<p><a href="https://github.com/mojombo/egitd">egitsd</a> &ndash; egitd is an Erlang git-daemon implementation that provides a more flexible,
scalable, and loggable way to serve public git repositories.  It is used by github.com.</p>

<p><a href="http://www.rabbitmq.com">RabbitMQ</a> &ndash; An open source message broker (sometimes called message-oriented middleware) that implements the Advanced Message Queuing Protocol (AMQP).</p>

<p><a href="https://github.com/erlang/otp/wiki/Projects-using-erlang-otp">More Projects using OTP&hellip;</a></p>

<h3>Sources:</h3>

<ul>
<li><a href="http://www.erlang.org/doc/">Erlang Website</a></li>
<li><a href="https://github.com/erlang/otp/wiki">Erlang OTP Source on Github</a></li>
<li><a href="http://elixir-lang.org">Elixir Website</a></li>
<li><a href="https://pragprog.com/book/elixir/programming-elixir">Programming Elixir Book</a> by <a href="https://twitter.com/pragdave">Dave Thomas</a></li>
<li><a href="http://elixirsips.com">Elixir Sips Screencasts</a> by <a href="https://plus.google.com/+JoshAdams">Josh Adams</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roman Numerals Elixir Kata]]></title>
    <link href="http://holsee.github.io/roman-numerals-elixir-kata/"/>
    <updated>2014-11-25T19:57:46+00:00</updated>
    <id>http://holsee.github.io/roman-numerals-elixir-kata</id>
    <content type="html"><![CDATA[<p>A fun little test driven kata which will introduce you to the basics of elixir.</p>

<p><div class='embed-video-container'><iframe src='http://www.youtube.com/embed/L_9pUkVSjcE' frameborder='0' allowfullscreen></iframe></div></p>

<p>A rule I try to follow for this is to try and keep my solution less than 20 lines of code.</p>
]]></content>
  </entry>
  
</feed>
