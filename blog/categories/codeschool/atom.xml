<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: codeschool | holsee]]></title>
  <link href="http://holsee.github.io/blog/categories/codeschool/atom.xml" rel="self"/>
  <link href="http://holsee.github.io/"/>
  <updated>2014-10-18T23:03:01+01:00</updated>
  <id>http://holsee.github.io/</id>
  <author>
    <name><![CDATA[holsee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Devlog: Ruby Bits 1 &amp; 2]]></title>
    <link href="http://holsee.github.io/devlog-ruby-bits-1-and-2/"/>
    <updated>2014-10-18T22:22:10+01:00</updated>
    <id>http://holsee.github.io/devlog-ruby-bits-1-and-2</id>
    <content type="html"><![CDATA[<p>Completed the <a href="https://www.codeschool.com/courses/ruby-bits">RUBY BITS</a> courses on <a href="http://mbsy.co/8TZ9N">CodeSchool</a>. Again&hellip; I was impressed with the content, as a casual rubyist I got plenty out of doing this.</p>

<p>I really enjoyed this course, I took away a lot of useful idioms which I will put to good use (when I get the chance).</p>

<p><img class="center" src="/images/badges/ruby-bits_badge.png" width="538" height="178"></p>

<p>The meta-programming a DSL creation in <a href="https://www.codeschool.com/courses/ruby-bits-part-2">RUBY BITS part 2</a> were great&hellip; adding methods to classes dynamically is pretty bad-ass for drying up code.</p>

<p><em>I always wanted default method implementation on interfaces in C#, dunno why I brought this up other than in Ruby that would never ever be an issue with the features you have at your disposal&hellip; very few languages lead to as much developer happiness.</em></p>

<p><img class="center" src="/images/badges/ruby-bits-2_badge.png" width="538" height="178"></p>

<p>Just one of those languages I would love to write everyday if I could.
Moving onto <a href="https://www.codeschool.com/courses/rails-testing-for-zombies">Rails Testing <em>for zombies</em></a> course next&hellip;</p>

<p>&hellip;that said <a href="http://elixir-lang.org">Elixir has hit v1.x</a> and the Dave Thomas <a href="https://pragprog.com/book/elixir/programming-elixir">&ldquo;Programming Elixir&rdquo;</a> book has been released, so that will most likely eat up the next month or two of my life.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devlog: Real Time Web with Node.js]]></title>
    <link href="http://holsee.github.io/devlog-real-time-web-with-node-dot-js/"/>
    <updated>2014-10-07T22:00:58+01:00</updated>
    <id>http://holsee.github.io/devlog-real-time-web-with-node-dot-js</id>
    <content type="html"><![CDATA[<p>Completed the <a href="">Real Time Web with Node.js course on CodeSchool</a></p>

<p><img src="/images/badges/rtnode_badge.png"></p>

<p>Another impeccable course, produced to the usual  high standards which I have come to expect with each and every CodeSchool module. Go give these guys money and do a few courses, worth every penny.</p>

<p>I have completed a couple of node.js projects to date and am currently working on a biggin', so I didn&rsquo;t find this course very challenging, but I did find it fun, another great jingle and lots of great content.</p>

<p>The examples go a long way to show how much you can do with so little code, walking students through using <a href="http://socket.io">socket.io</a> and <a href="http://redis.io">redis</a> to build a chat client and a Q&amp;A system.</p>

<p>Something I learned was how to use redis effectively, the course got me started and provided useful tips such as limiting size of a list to 10 items for example:</p>

<p>```javascript
var redis = require(&ldquo;redis&rdquo;),</p>

<pre><code>client = redis.createClient();
</code></pre>

<p>//&hellip; on last meeting submitted &hellip;
var meeting = JSON.stringify(lastMeeting)</p>

<p>// Use LPUSH &amp; LTRIM in tandem
client.lpush(&lsquo;recent_meetings&rsquo;, meeting, function(err, reply) {
  client.ltrim(&lsquo;recent_meetings&rsquo;, 0, 9) // 10 Items Max
})
```</p>

<p>and for good measure,
<a href="devlog-a-sip-of-coffeescript">using my new CoffeeScript skills</a>, the same thing:
```coffeescript
redis = require(&ldquo;redis&rdquo;)
client = redis.createClient()</p>

<h1>&hellip; on last meeting submitted &hellip;</h1>

<p>meeting = JSON.stringify lastMeeting</p>

<p>client.lpush &lsquo;recent_meetings&rsquo;, meeting, (err, reply) &ndash;><br/>
  client.ltrim(&lsquo;recent_meetings&rsquo;, 0, 9) # 10 Items Max</p>

<p>```</p>

<p>P.S. This gif of Eric Allam &amp; Gregg Pollack cracks me up no end&hellip;</p>

<p><img class="center <a" src="href="http://courseware.codeschool.com/images/blog/node-mind-blown.gif">http://courseware.codeschool.com/images/blog/node-mind-blown.gif</a>" width="800" height="800"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devlog: A Sip of CoffeeScript]]></title>
    <link href="http://holsee.github.io/devlog-a-sip-of-coffeescript/"/>
    <updated>2014-10-06T23:21:12+01:00</updated>
    <id>http://holsee.github.io/devlog-a-sip-of-coffeescript</id>
    <content type="html"><![CDATA[<p>Completed the <a href="https://www.codeschool.com/courses/coffeescript">CoffeeScript course on CodeSchool</a>.</p>

<p><img class="center" src="/images/badges/coffeescript_badge.png"></p>

<p>I love these list comprehensions&hellip; I don&rsquo;t think I will be writing straight JS for a while.</p>

<p>``` coffeescript</p>

<h1>Eat lunch.</h1>

<p>eat food for food in [&lsquo;toast&rsquo;, &lsquo;cheese&rsquo;, &lsquo;wine&rsquo;]</p>

<h1>Fine five course dining.</h1>

<p>courses = [&lsquo;greens&rsquo;, &lsquo;caviar&rsquo;, &lsquo;truffles&rsquo;, &lsquo;roast&rsquo;, &lsquo;cake&rsquo;]
menu i + 1, dish for dish, i in courses</p>

<h1>Health conscious meal.</h1>

<p>foods = [&lsquo;broccoli&rsquo;, &lsquo;spinach&rsquo;, &lsquo;chocolate&rsquo;]
eat food for food in foods when food isnt &lsquo;chocolate&rsquo;
```</p>
]]></content>
  </entry>
  
</feed>
