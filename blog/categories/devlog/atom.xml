<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devlog | holsee]]></title>
  <link href="http://holsee.github.io/blog/categories/devlog/atom.xml" rel="self"/>
  <link href="http://holsee.github.io/"/>
  <updated>2014-11-24T01:14:25+00:00</updated>
  <id>http://holsee.github.io/</id>
  <author>
    <name><![CDATA[holsee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Devlog: Rails Testing]]></title>
    <link href="http://holsee.github.io/devlog-rails-testing-for-zombies/"/>
    <updated>2014-11-24T00:21:45+00:00</updated>
    <id>http://holsee.github.io/devlog-rails-testing-for-zombies</id>
    <content type="html"><![CDATA[<p>Completed the <a href="https://www.codeschool.com/courses/rails-testing-for-zombies">Rails Testing <em>for zombies</em></a> courses on <a href="http://mbsy.co/8TZ9N">CodeSchool</a> tonight.</p>

<p>I liked it, I always found starting a new rails app always triggered my testing OCD and it was nice to get an insight into the strategies one can take to test a rails app without overdoing it.</p>

<p><img src="/images/badges/rtfz_badge.png"></p>

<p>The course covers how to unit test and integration test your rails app with fixtures using TestUnit, so you are given a good idea of the tools at your disposal out of the box. As a well as that you are introduced to other popular testing gems which make your life easier.</p>

<p>During the Unit Testing section you are introduced to <a href="https://github.com/thoughtbot/shoulda">Shoulda</a> gem which is described as an alternative syntax that is easy on the fingers and the eyes.</p>

<p><code>ruby
class UserTest &lt; Test::Unit::TestCase
  should have_many(:posts)
  should_not allow_value("blah").for(:email)
end
</code></p>

<p>As the course starts to dig into integration testing you are also introduced to <a href="https://github.com/jnicklas/capybara">Capybara</a> which provides a interaction based DSL for defining your integration tests that supports <a href="http://www.rubydoc.info/github/jnicklas/capybara#Drivers">multiple drivers</a> and that acts like a headless browser of sorts giving you more control over the interactions with your site / api, following redirects more naturally as an example.</p>

<p>``` ruby
 describe &ldquo;the signin process&rdquo;, :type => :feature do
  before :each do</p>

<pre><code>User.make(:email =&gt; 'user@example.com', :password =&gt; 'password')
</code></pre>

<p>  end</p>

<p>  it &ldquo;signs me in&rdquo; do</p>

<pre><code>visit '/sessions/new'
within("#session") do
  fill_in 'Email', :with =&gt; 'user@example.com'
  fill_in 'Password', :with =&gt; 'password'
end
click_button 'Sign in'
expect(page).to have_content 'Success'
</code></pre>

<p>  end
end
```</p>

<p>Lastly you are introduced to <a href="https://github.com/thoughtbot/factory_girl">FactoryGirl</a>, which is an alternative to using the built in test fixtures provided by rails out of the box.</p>

<p>There are numerous advantages to using a factories and specifically FactoryGirl instead of the built in rails fixture for your test data. You are provided with granular control over how the test data built and initialized not to mention the ability to create test data dynamically rather than maintaining a complex hand crafted static data set defined in yaml with magic ids providing the only basis for associations.</p>

<p>``` ruby</p>

<h1>This will guess the User class</h1>

<p>FactoryGirl.define do
  factory :user do</p>

<pre><code>first_name "John"
last_name  "Doe"
age 27
admin false
association :roles

# This will use the User class
factory :admin do
  first_name "Admin"
  last_name  "User"
  admin      true
end
</code></pre>

<p>  end
end
```</p>

<p>Using the <code>Factory</code> method directly will create an instance of an admin and insert it into the DB.</p>

<p><code>ruby
test 'something to do with an admin' do
  user = Factory(:admin)
  assert user.admin
end
</code>
Beyond this basic example you are able to create new instances without inserting them into the database using the <code>build</code> method on the Factory as well as defining associations between entities as simple as adding <code>association :roles</code>.</p>

<p><code>ruby
test 'something to do with an admin' do
  user = Factory(:admin)
  assert user.admin
end
</code></p>

<p>Insights into a good test strategy that I took away was to unit test the model and have a full suite of integration tests for everything else, which regards to the rails portion of your application anyway, keep your controllers and views logic free.</p>

<p>This is the approach that I had taken with a node.js app I have been writing, although I have been hand crafting the test data code I think I will look for something like FactoryGirl maybe <a href="https://www.npmjs.org/package/factory-girl">this javcascript port</a>.</p>

<p>So thats another course completed, and was well worth the time, not a bad way to spend some of your Sunday afternoon. I think I might do the <a href="https://www.codeschool.com/courses/try-r">Try R</a> course next or some <a href="https://www.codeschool.com/courses/warming-up-with-ember-js">Ember.js</a> which I can put to use in the near future as I am design a website for my wife to kick start a new business idea we have.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devlog: Ruby Bits 1 &amp; 2]]></title>
    <link href="http://holsee.github.io/devlog-ruby-bits-1-and-2/"/>
    <updated>2014-10-18T22:22:10+01:00</updated>
    <id>http://holsee.github.io/devlog-ruby-bits-1-and-2</id>
    <content type="html"><![CDATA[<p>Completed the <a href="https://www.codeschool.com/courses/ruby-bits">RUBY BITS</a> courses on <a href="http://mbsy.co/8TZ9N">CodeSchool</a>. Again&hellip; I was impressed with the content, as a casual rubyist I got plenty out of doing this.</p>

<p>I really enjoyed this course, I took away a lot of useful idioms which I will put to good use (when I get the chance).</p>

<p><img class="center" src="/images/badges/ruby-bits_badge.png" width="538" height="178"></p>

<p>The meta-programming a DSL creation in <a href="https://www.codeschool.com/courses/ruby-bits-part-2">RUBY BITS part 2</a> were great&hellip; adding methods to classes dynamically is pretty bad-ass for drying up code.</p>

<p><em>I always wanted default method implementation on interfaces in C#, dunno why I brought this up other than in Ruby that would never ever be an issue with the features you have at your disposal&hellip; very few languages lead to as much developer happiness.</em></p>

<p><img class="center" src="/images/badges/ruby-bits-2_badge.png" width="538" height="178"></p>

<p>Just one of those languages I would love to write everyday if I could.
Moving onto <a href="https://www.codeschool.com/courses/rails-testing-for-zombies">Rails Testing <em>for zombies</em></a> course next&hellip;</p>

<p>&hellip;that said <a href="http://elixir-lang.org">Elixir has hit v1.x</a> and the Dave Thomas <a href="https://pragprog.com/book/elixir/programming-elixir">&ldquo;Programming Elixir&rdquo;</a> book has been released, so that will most likely eat up the next month or two of my life.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devlog: Real Time Web with Node.js]]></title>
    <link href="http://holsee.github.io/devlog-real-time-web-with-node-dot-js/"/>
    <updated>2014-10-07T22:00:58+01:00</updated>
    <id>http://holsee.github.io/devlog-real-time-web-with-node-dot-js</id>
    <content type="html"><![CDATA[<p>Completed the <a href="">Real Time Web with Node.js course on CodeSchool</a></p>

<p><img src="/images/badges/rtnode_badge.png"></p>

<p>Another impeccable course, produced to the usual  high standards which I have come to expect with each and every CodeSchool module. Go give these guys money and do a few courses, worth every penny.</p>

<p>I have completed a couple of node.js projects to date and am currently working on a biggin', so I didn&rsquo;t find this course very challenging, but I did find it fun, another great jingle and lots of great content.</p>

<p>The examples go a long way to show how much you can do with so little code, walking students through using <a href="http://socket.io">socket.io</a> and <a href="http://redis.io">redis</a> to build a chat client and a Q&amp;A system.</p>

<p>Something I learned was how to use redis effectively, the course got me started and provided useful tips such as limiting size of a list to 10 items for example:</p>

<p>```javascript
var redis = require(&ldquo;redis&rdquo;),</p>

<pre><code>client = redis.createClient();
</code></pre>

<p>//&hellip; on last meeting submitted &hellip;
var meeting = JSON.stringify(lastMeeting)</p>

<p>// Use LPUSH &amp; LTRIM in tandem
client.lpush(&lsquo;recent_meetings&rsquo;, meeting, function(err, reply) {
  client.ltrim(&lsquo;recent_meetings&rsquo;, 0, 9) // 10 Items Max
})
```</p>

<p>and for good measure,
<a href="devlog-a-sip-of-coffeescript">using my new CoffeeScript skills</a>, the same thing:
```coffeescript
redis = require(&ldquo;redis&rdquo;)
client = redis.createClient()</p>

<h1>&hellip; on last meeting submitted &hellip;</h1>

<p>meeting = JSON.stringify lastMeeting</p>

<p>client.lpush &lsquo;recent_meetings&rsquo;, meeting, (err, reply) &ndash;><br/>
  client.ltrim(&lsquo;recent_meetings&rsquo;, 0, 9) # 10 Items Max</p>

<p>```</p>

<p>P.S. This gif of Eric Allam &amp; Gregg Pollack cracks me up no end&hellip;</p>

<p><img class="center <a" src="href="http://courseware.codeschool.com/images/blog/node-mind-blown.gif">http://courseware.codeschool.com/images/blog/node-mind-blown.gif</a>" width="800" height="800"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devlog: A Sip of CoffeeScript]]></title>
    <link href="http://holsee.github.io/devlog-a-sip-of-coffeescript/"/>
    <updated>2014-10-06T23:21:12+01:00</updated>
    <id>http://holsee.github.io/devlog-a-sip-of-coffeescript</id>
    <content type="html"><![CDATA[<p>Completed the <a href="https://www.codeschool.com/courses/coffeescript">CoffeeScript course on CodeSchool</a>.</p>

<p><img class="center" src="/images/badges/coffeescript_badge.png"></p>

<p>I love these list comprehensions&hellip; I don&rsquo;t think I will be writing straight JS for a while.</p>

<p>``` coffeescript</p>

<h1>Eat lunch.</h1>

<p>eat food for food in [&lsquo;toast&rsquo;, &lsquo;cheese&rsquo;, &lsquo;wine&rsquo;]</p>

<h1>Fine five course dining.</h1>

<p>courses = [&lsquo;greens&rsquo;, &lsquo;caviar&rsquo;, &lsquo;truffles&rsquo;, &lsquo;roast&rsquo;, &lsquo;cake&rsquo;]
menu i + 1, dish for dish, i in courses</p>

<h1>Health conscious meal.</h1>

<p>foods = [&lsquo;broccoli&rsquo;, &lsquo;spinach&rsquo;, &lsquo;chocolate&rsquo;]
eat food for food in foods when food isnt &lsquo;chocolate&rsquo;
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devlog: What I've Been Learning]]></title>
    <link href="http://holsee.github.io/devlog-what-ive-been-learning/"/>
    <updated>2014-09-24T00:00:00+01:00</updated>
    <id>http://holsee.github.io/devlog-what-ive-been-learning</id>
    <content type="html"><![CDATA[<p>These last few months I have been learning more than usual and in this post I talk a little about some of the things that have caught my interest.  All of this is outside of work as my day job is working on a Trading platform written in C#.</p>

<p>Another goal of this post is to kick start my blogging again which I have completely got out of the way of doing over the last 2 or so years.</p>

<h3>Erlang &amp; Elixir</h3>

<p>Partially inspired by my functional programming binge and a chat I had with <a href="http://joearms.github.io">Joe Armstrong</a> at <a href="http://reactconf.com">ReactConf</a>; I have been getting stuck into Erlang, <a href="http://elixir-lang.org">Elixir</a> and the <a href="https://github.com/phoenixframework/phoenix">Phoenix web framework</a>.</p>

<p>I feel these will play a big part in my future.  The BEAM VM is fascinating and the powerful distributed programming model via the OTP libraries is something different and interesting.  I look forward to digging into these topics on my blog in the coming months as I become more familiar with them.</p>

<p>I am working on an &lsquo;anonymous&rsquo; location broadcast server to use these technologies in anger and I have found this has helped me achieve those A-HA moments that are so important when it comes to learning something and making it stick.</p>

<h3>Node.js</h3>

<p>I&rsquo;ve been working away on a personal project (which will be launched at outloud.io some time in the future) using node.js, express.js, postgreSQL, passport.js, mocha, chai, chai-as-promised, Q, db-migrate, node-env&hellip;</p>

<p>I have had this idea for a while, and I got pretty excited about building it.  At the time I was looking for a good excuse to get stuck into a substantial project which was built on node.js.  Even though I have used JS for years I have learned a great deal about the node way, building stuff tis the best way to learn it is no secret.</p>

<h3>Ruby and Rails</h3>

<p>I completed a MOOC course on Coursera on <a href="https://www.coursera.org/course/webapplications">Web Application Architectures</a> which used Ruby &amp; Rails recently.  Was very much entry level stuff, got through it in about 2 days and I think anybody with significant web dev experiences would find the same thing.  I guess it showed me that I knew more than I thought about Ruby and Rails and needed to focus on more advanced and newer topics.</p>

<p>I have been slowly but surely learning Ruby for the past 4 years and I find it lots of fun.  I used to subscribe and watch the <a href="http://www.rubytapas.com">Ruby Tapas</a> episodes which are brilliant, but because I wasn&rsquo;t using it in my day job for anything more than Chef scripts I never really got to go deep.</p>

<p><a href="http://www.codewars.com/about">Codewars.com</a> stole quite a few of my evenings, a great way to learn or get better using a language by solving a katas (with tests) then seeing how others solved the same problems in a potentially more idiomatic way.  Each solution is rated by the community on &lsquo;how smart&rsquo; and &lsquo;best practice&rsquo; which is a nice touch.</p>

<p>I plan to dig into the latest version of Rails for Zombies on Code School and keep going to the <a href="http://belfastruby.com">Belfast Ruby</a> meet-ups.</p>

<h3>Objective-C</h3>

<p>I worked as a &ldquo;mobile developer&rdquo; and have built a few apps over the last number of years in various technologies such as Obj-C, Java (Android), C# Xamarin (targeting both iOS and Android) and some PoCs using Phonegap.</p>

<p>But I never felt I got to use Objective-C to the extent I wanted to, as the performance, the sexy runtime dispatch and the CocoaTouch libs intrigued.  A friend of mine who now works at Apple once told me the Cocoa libraries were examples of some of the nicest Object Oriented programming he had ever seen.  This has always made me want to know more.</p>

<p>My employer sent me on an Objective-C course few months back which was nice of them since I don&rsquo;t even use it in my current day job.</p>

<p>As I said, apple dev has always interested me so I have read a couple of books and completed numerous little projects.</p>

<p>Right now I am working through the iOS Code School path and building and iOS client for the location broadcast server I spoke about in the Elixir section above.</p>

<p>I wouldn&rsquo;t mind working on iOS again&hellip; which leads me into&hellip;</p>

<h3>Swift 1.0</h3>

<p>XCode 6.0.1 has been dropped and now I have Swift to play with :D. I didn&rsquo;t have my own Apple dev license so I had to wait.  I did pretty much read the iBook cover to cover in the interim.</p>

<p>If I am to ever transition into this area, I would like to do so where I can hit the ground running so I might start to port the Objective-C location client to swift (or maybe just parts of it to get used to the interop).</p>

<h3>Data Structure &amp; Algorithms</h3>

<p>I always try to keep a balance of new technologies/language and CS theory.   Right now I do have a desire to spend more time reading up on Data Structures and Algorithms and their application to big problems.  This is the stuff that you learn and is timeless, and there is plenty of it to get stuck into!</p>

<p>I was fortunate enough to do the <a href="http://instil.co/courses/writing-concurrent-code-with-lock-free-algorithms/">&lsquo;Writing Concurrent Code with Lock-Free Algorithms&rsquo; course</a> by <a href="http://mechanical-sympathy.blogspot.co.uk">Martin Thompson</a> and I got to hear him speak a couple of weeks ago at the End of Summer Bash event&hellip; if you haven&rsquo;t watched one of his talks please take the time to do so <a href="http://www.infoq.com/author/Martin-Thompson">(now)</a>.</p>

<p>The big take away for me is the fastest, most elegant and performant solutions, come from  using the most appropriate, hand crafted, intelligently selected data structures and algorithms to solve the problem over picking up general purpose tools.</p>

<p>There is so much more in this area that I want to talk about but not in this post&hellip; but definitely add <a href="http://mechanical-sympathy.blogspot.co.uk">Mechanical Sympathy</a> to your blog reader.</p>

<h3>Functional &amp; Reactive Programming</h3>

<p>I completed the <a href="https://www.coursera.org/course/progfun">Functional Programming Principles in Scala</a>, a MOOC on Coursera.  Before that I completed the <a href="https://www.coursera.org/course/reactive">Reactive Programming</a> course.  These were very good, humbling, challenging and rewarding.</p>

<p>I have been using RX in .NET for years which helped a lot but I still found the Reactive course very worth while.  Both these courses use Scala and I enjoyed getting to learn it a bit better.  I liked how the reactive programming course built up concepts in layers, starting with getting the students to build a priority queue and finishing with reactive system using the <a href="http://akka.io">Akka</a> actor model.</p>

<h3>Some Books: Remote, Rework &amp; Lean Start-up</h3>

<p>In the last 6 months I have read these books each twice (well I used audible so they were read to me twice). Wonderful books which resonated with me on so many levels.  They are informative and practical guides which are also quite inspiring.</p>

<p>I think I really got inspired to start developing outloud.io through my desire to just start something of my own from reading <a href="http://theleanstartup.com">The Lean Startup</a>.</p>

<h3>Teaching</h3>

<p>As a senior engineer I teach as part of my job, but recently I have been helping my buddy who is learning to program.</p>

<p>This is a different challenge altogether, starting from the basics and helping to set the mindset and guide the conceptual thinking required.</p>

<p>He has a degree and a load of music related qualifications and we discussed what would be the best way to start a career in software development.</p>

<p>I have a degree in Computer Science, and I found it very useful, but not necessarily necessary&hellip; well depending on the desired job and in a sense that all that theory is accessible elsewhere.</p>

<p>He could go back a do a Masters degree in CS, but is the cost worth it? Maybe&hellip; but to get the most out of the year (or 2) having some programming experience would be required before hand and thats where I am helping out.</p>

<p>So, I got to thinking about what are good resources for becoming a programmer and basically ended up recommending the same resources that I use:</p>

<ul>
<li>Coursera &amp; MOOCs</li>
<li>Code School</li>
<li>Books</li>
<li>Podcasts</li>
</ul>


<p>He has also found some other reasons handy, so I will be sure to link them and his new blog when he gets round to setting it up!</p>

<h3>Meteor and DDP</h3>

<p>I must say <a href="https://www.meteor.com">meteor.js</a> and <a href="https://www.meteor.com/blog/2012/03/21/introducing-ddp">Distributed Data Protocol</a> look very interesting indeed.</p>

<p>Have watched a few <a href="https://www.meteor.com/screencast">screencasts</a>, something that is well and truly on the radar now.</p>

<h3>Whats next?</h3>

<p>I really need to prioritize thats for sure. This is quite a lot I have going on.  It blew my mind when I put it all into Trello&hellip; just too much interesting stuff and not enough hours in the day.</p>
]]></content>
  </entry>
  
</feed>
