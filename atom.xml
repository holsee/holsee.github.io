<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[holsee]]></title>
  <link href="http://holsee.github.io/atom.xml" rel="self"/>
  <link href="http://holsee.github.io/"/>
  <updated>2015-04-28T17:00:45+01:00</updated>
  <id>http://holsee.github.io/</id>
  <author>
    <name><![CDATA[holsee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ElixirConfEU - Elixir Processes in 3D]]></title>
    <link href="http://holsee.github.io/elixirconfeu-elixir-procs-in-3d/"/>
    <updated>2015-04-28T16:06:04+01:00</updated>
    <id>http://holsee.github.io/elixirconfeu-elixir-procs-in-3d</id>
    <content type="html"><![CDATA[<p>I gave a lightning talk at <a href="http://ElixirConf.eu">ElixirConfEU</a> on Visualizing Elixir Processes in 3D.</p>

<p><img class="center" src="http://holsee.github.io/images/exconfeu/elixirconf_lightning_talk.jpg"></p>

<p>A few nights before travelling to Krakow I had watched a video by <a href="https://github.com/krestenkrab/">Kresten Krab Thorup</a> on his project <a href="https://github.com/krestenkrab/erlubi">Erlubi</a> which transmits basic details of the Erlang VM to a <a href="http://ubietylab.net">Ubigrpah Server</a>.</p>

<p>I started to use this to inspect Erlang projects, and play about with OTP Supervisor trees and how they looked in 3D.</p>

<p>I decided to go about using this from elixir.  It doesn&rsquo;t take much to use from elixir; if you want to visualize your own project simply cherry pick the steps 1, 3, 6 and 7 below.</p>

<p><em>1</em> Download the Ubigraph server from <a href="http://ubietylab.net">ubietylab.net</a>. Unpack it and just run the command line tool bin/ubigraph_server. A black window will appear.</p>

<p><em>2</em> Create a new elixir project <code>mix new lightning_ex</code> and cd into directory.</p>

<p><em>3</em> Add Erlubi as a dependency to the mix.exs file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defp</span> <span class="n">deps</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="p">[{</span><span class="ss">:erlubi</span><span class="p">,</span> <span class="ss">github:</span> <span class="s2">&quot;krestenkrab/erlubi&quot;</span><span class="p">}]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>4</em> Add some code to ex_lightning.ex to generate linked and unlinking procs</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">ExLightning</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">start_linked</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">for</span> <span class="n">_</span> <span class="o">&lt;-</span> <span class="m">1</span><span class="o">..</span><span class="n">n</span> <span class="k">do</span>
</span><span class='line'><span class="k">      </span><span class="no">Task</span><span class="o">.</span><span class="n">start_link</span><span class="p">(</span><span class="k">fn</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="ss">:timer</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="m">1000</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">start</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">for</span> <span class="n">_</span> <span class="o">&lt;-</span> <span class="m">1</span><span class="o">..</span><span class="n">n</span> <span class="k">do</span>
</span><span class='line'><span class="k">      </span><span class="no">Task</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="k">fn</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="ss">:timer</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="m">1000</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>5</em> In terminal fetch dependencies and compile with <code>mix do deps.get, compile</code></p>

<p><em>6</em> In terminal iex session loading in project with <code>iex -S mix</code></p>

<p><em>7</em> In iex session start Erlubi tracer with <code>:erlubi_tracer.run</code>.  If you get an error ensure you started ubigraph_server as described in step 1. At this point you should see the vanilla elixir system visualized in 3D like so:</p>

<p><img class="center" src="http://holsee.github.io/images/exconfeu/erlubi_vanilla.png"></p>

<p><em>8</em> run <code>ExLightning.start 5000</code> which will create 5000 unlinked processes (unbound red spheres)</p>

<p><img class="center" src="http://holsee.github.io/images/exconfeu/erlubi_unlinked.png"></p>

<p><em>9</em> run <code>ExLightning.start_linked 5000</code> which will create 5000 linked processes, which will be linked to the creating process.</p>

<p><img class="center" src="http://holsee.github.io/images/exconfeu/erlubi_linked.png"></p>

<p>Full source code can be found here: <a href="https://github.com/holsee/lightning_ex">https://github.com/holsee/lightning_ex</a></p>

<p>Have fun :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Elixir is about @ Erlang Factory SF 2015]]></title>
    <link href="http://holsee.github.io/what-elixir-is-about-at-erlang-factory-sf-2015/"/>
    <updated>2015-04-02T10:57:45+01:00</updated>
    <id>http://holsee.github.io/what-elixir-is-about-at-erlang-factory-sf-2015</id>
    <content type="html"><![CDATA[<p>Much more than an introduction to the elixir language, the philosophy and design choices are examined in this talk by <a href="https://twitter.com/josevalim">José Valim</a>.</p>

<p>Even for the seasoned elixir wrangler this is a very interesting watch, as José discusses the kind of citizen elixir wants to be in the Erlang ecosystem.</p>

<div class='embed-video-container'><iframe src='http://www.youtube.com/embed/Lqo9-pQuRKE' frameborder='0' allowfullscreen></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spotify Culture Envy]]></title>
    <link href="http://holsee.github.io/spotify-culture-envy/"/>
    <updated>2015-03-27T19:05:48+00:00</updated>
    <id>http://holsee.github.io/spotify-culture-envy</id>
    <content type="html"><![CDATA[<p>Love these videos, love Spotify&rsquo;s culture, looks like a great place to work.</p>

<div class="embed-video-container"><iframe src="http://player.vimeo.com/video/85490944 "></iframe></div>


<p>Far bigger company than I thought they would be&hellip; tis cool how they approach the architecture to cope with that effectively.</p>

<div class="embed-video-container"><iframe src="http://player.vimeo.com/video/94950270 "></iframe></div>


<p>Well worth the watch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't circum to dumb]]></title>
    <link href="http://holsee.github.io/dont-circum-to-dumb/"/>
    <updated>2015-03-17T08:21:05+00:00</updated>
    <id>http://holsee.github.io/dont-circum-to-dumb</id>
    <content type="html"><![CDATA[<p>I think brushing up on Computer Science fundamentals from time to time is a valuable endeavour, which every developer should do.</p>

<p>Even if it is as little as taking one of the many <a href="http://holsee.github.io/mit-introduction-to-algorithms/">undergrad level modules online</a>.  Many of which are not to be sniffed at.</p>

<p><span class='pullquote-right' data-pullquote='I think we owe it to ourselves to get better or at the very least not get dumber, as many jobs in our industry will make you dumber over time.'>
In our industry we are not chartered, and nor do I think we should be as I don&rsquo;t like the idea of a professional body lording over us.  I think we owe it to ourselves to get better or at the very least not get dumber, as many jobs in our industry will make you dumber over time.
</span></p>

<p>My Sister is a doctor, and soon she will be revalidated: &ldquo;<em>Revalidation is the process by which doctors holding registration with a licence to practise will have to demonstrate to the GMC that they are up-to-date and fit to practise and complying with the relevant professional standards.</em>&rdquo;</p>

<p>I can&rsquo;t speak for what her day to day is like, but as a practicing doctor I doubt you exercise your entire base of knowledge on a regular enough basis to avoid refreshing yourself with the fundamentals from time to time.</p>

<p>Now imagine beyond doing our daily duties, developers were required to go through such a &ldquo;revalidation&rdquo; process in order to be allowed to hold the title of software engineer (or whatever).</p>

<p>An interesting thought&hellip; baring in mind we all probably know at least one <a href="http://techcrunch.com/2015/03/08/on-secretly-terrible-engineers/">Secretly Terrible Engineer</a>.</p>

<p>Ours is a industry fueled by both passion and science, and the passion is what has pushed us forward.  The same can be said for medicine.</p>

<p>Bad engineers probably were not always that way, maybe they were both sharp and passionate when they started, but the lack of inspiration in their 9 to 5 has caused them to become blunt and disenchanted over time.</p>

<p>It is often said software development is so broad and someone cannot possibly know everything, true, but I don&rsquo;t think medicine is a small field and there is no excuse for a Doctor to not be continually up-to-date with the fundamentals of their field as well as their respective specialization.</p>

<p>I for one don&rsquo;t like the idea of being made to &ldquo;Revalidate&rdquo;, but I do think we owe it to ourselves to try and stay fresh and up-to-date with the foundations of our industry.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MIT: Introduction to Algorithms]]></title>
    <link href="http://holsee.github.io/mit-introduction-to-algorithms/"/>
    <updated>2015-03-17T08:09:53+00:00</updated>
    <id>http://holsee.github.io/mit-introduction-to-algorithms</id>
    <content type="html"><![CDATA[<p>I recently got into a conversation about the computer science classic <em>sorting</em>, in particular we chatted about applications of Radix Sort.</p>

<p><span class='pullquote-right' data-pullquote='&#8220;Radix sorts are often, in practice, the fastest and most useful sorts on parallel machines.&#8221;'>
This is not something I had really needed to look into in any detail, but sparked my interest due to this statement &ldquo;Radix sorts are often, in practice, the fastest and most useful sorts on parallel machines.&rdquo;
</span></p>

<p>The spark rekindled my desire for refreshing my knowledge of the basics so I may build on this to explore the latest and greatest research in this area.</p>

<p>I personally like the MIT course <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/lecture-videos/">Introduction to Algorithms</a> as it covers so many of the fundamentals very well.</p>

<p>Watching &ldquo;Counting Sort, Radix Sort, Lower Bounds for Sorting&rdquo; at the minute:</p>

<div class='embed-video-container'><iframe src='http://www.youtube.com/embed/Nz1KZXbghj8' frameborder='0' allowfullscreen></iframe></div>


<p>A good start for now.</p>

<p>Also worth checking out: <a href="http://cs.stackexchange.com/questions/12223/practical-applications-of-radix-sort">&ldquo;Practical Applications of Radix Sort&rdquo;</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A taste of elixir at Functional Kats Belfast]]></title>
    <link href="http://holsee.github.io/a-taste-of-elixir/"/>
    <updated>2015-03-13T12:02:36+00:00</updated>
    <id>http://holsee.github.io/a-taste-of-elixir</id>
    <content type="html"><![CDATA[<p>I recently gave a presentation to <a href="http://www.meetup.com/Functional-Kats-Belfast/">Functional Kats (Belfast)</a> on the elixir language.  It was a lot of fun!</p>

<p>The format of the event I totally love, it started with a couple of talks followed by a Kata hack where we all had a go at implementing the Luhn Credit Card algo in the functional programming language of our choice.  At the end we all took turns to present our solutions.</p>

<p>The goal of my talk was to arm the folks with enough of the basics to implement the Kata in elixir.</p>

<p><img src="http://holsee.github.io/images/me_at_func_kats.jpeg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinking Like an Erlanger]]></title>
    <link href="http://holsee.github.io/thinking-like-an-erlanger/"/>
    <updated>2015-03-08T20:51:47+00:00</updated>
    <id>http://holsee.github.io/thinking-like-an-erlanger</id>
    <content type="html"><![CDATA[<p>I found this video last night by <a href="LeHoff">Torben Hoffman</a>, I recommend folks interested in Erlang or Elixir give it a watch and take it to heart.  Torben does a good job of displaying how an &ldquo;Erlanger&rdquo; should think, in comparison to other programmers.</p>

<div class="embed-video-container"><iframe src="http://player.vimeo.com/video/118258580 "></iframe></div>


<p>Torben recommends 2 books which have been added to my reading list:</p>

<p><a href="http://www.usingcsp.com/cspbook.pdf">Communicating Sequential Processes</a> by C.A.R. Hoare. (Free digital Version)</p>

<p><a href="http://www.amazon.co.uk/Principles-Protocol-Design-Robin-Sharp/dp/3540775404">Principles of Protocol Design</a> by Robin Sharp.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir, BEAM and OTP]]></title>
    <link href="http://holsee.github.io/elixir-beam-otp/"/>
    <updated>2014-12-29T14:25:42+00:00</updated>
    <id>http://holsee.github.io/elixir-beam-otp</id>
    <content type="html"><![CDATA[<p><em>As I plan to write and speak about Elixir on my blog and hopefully at some meet-ups soon, I though I would write a short post with handy descriptions of some of the key aspects that I can reference in one place&hellip;</em></p>

<h3>What is Elixir?</h3>

<p>Think Dave Thomas describes it best&hellip;</p>

<p>&ldquo;The Elixir Programming Language wraps functional programming with immutable state and an actor-based approach to concurrency in a tidy modern syntax.  And it runs on the industrial-strength, high-performance, distributed Erlang VM.&rdquo;</p>

<p>It has very powerful meta-programming capabilities through compile time expansion of macros and the dynamic power of the language.  A good example of the developer productivity that can be gained is their use in the <a href="http://www.phoenixframework.org/v0.7.2/docs/routing">routing system in the phoenix web framework</a>. When learning about Elixir macros I found the &lsquo;<a href="http://www.theerlangelist.com/2014/06/understanding-elixir-macros-part-1.html">Understanding Elixir Macros Series</a>&rsquo; by <a href="https://twitter.com/sasajuric">Saša Jurić</a> to be very useful.</p>

<h3>What is the Erlang VM &amp; BEAM?</h3>

<p>The &ldquo;Erlang VM&rdquo; is the name of the virtual machine where all Erlang code is executed. Every compiled Erlang file has the suffix .beam.</p>

<p>There is also an implementation of Erlang which runs on the JVM, called <a href="https://github.com/krestenkrab/erjang/wiki">Erjang</a>, but I guess the less said about that the better as the Erlang VM is really the awesome part if you ask me.</p>

<p>When you compile Elixir code it is converted to .beam format, which allows it to be executed on the Erlang VM.</p>

<h3>What is OTP?</h3>

<p>OTP is set of Erlang libraries and design principles providing middle-ware to develop these systems. It includes its own distributed database, applications to interface towards other languages, debugging and release handling tools.</p>

<p>The OTP libraries (and the associated best practices to an extent) are mature, battle hardened and hide much of the boilerplate code required to perform common patterns such as creating a server to store state, recover from failures through supervision trees and so much more.</p>

<p>I look forward to writing about this with examples in future as I learn more about OTP myself.</p>

<p><em>Where is OTP used?</em></p>

<p><a href="https://github.com/mojombo/egitd">egitsd</a> &ndash; egitd is an Erlang git-daemon implementation that provides a more flexible,
scalable, and loggable way to serve public git repositories.  It is used by github.com.</p>

<p><a href="http://www.rabbitmq.com">RabbitMQ</a> &ndash; An open source message broker (sometimes called message-oriented middleware) that implements the Advanced Message Queuing Protocol (AMQP).</p>

<p><a href="https://github.com/erlang/otp/wiki/Projects-using-erlang-otp">More Projects using OTP&hellip;</a></p>

<h3>Sources:</h3>

<ul>
<li><a href="http://www.erlang.org/doc/">Erlang Website</a></li>
<li><a href="https://github.com/erlang/otp/wiki">Erlang OTP Source on Github</a></li>
<li><a href="http://elixir-lang.org">Elixir Website</a></li>
<li><a href="https://pragprog.com/book/elixir/programming-elixir">Programming Elixir Book</a> by <a href="https://twitter.com/pragdave">Dave Thomas</a></li>
<li><a href="http://elixirsips.com">Elixir Sips Screencasts</a> by <a href="https://plus.google.com/+JoshAdams">Josh Adams</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To Be Message Driven]]></title>
    <link href="http://holsee.github.io/to-be-message-driven/"/>
    <updated>2014-12-22T13:38:20+00:00</updated>
    <id>http://holsee.github.io/to-be-message-driven</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/toddlmontgomery">@ToddMontgomery</a>&rsquo;s session on message passing and distributed systems at <a href="http://reactconf.com">ReactConf</a>.</p>

<div class='embed-video-container'><iframe src='http://www.youtube.com/embed/DL_-ENSpcAg' frameborder='0' allowfullscreen></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET Open Sourced]]></title>
    <link href="http://holsee.github.io/dot-net-open-sourced/"/>
    <updated>2014-11-25T20:14:16+00:00</updated>
    <id>http://holsee.github.io/dot-net-open-sourced</id>
    <content type="html"><![CDATA[<p>Pretty cool that <a href="http://blogs.msdn.com/b/dotnet/archive/2014/11/12/net-core-is-open-source.aspx">.NET got open sourced</a>, even more cool is that it is MIT license with the <a href="https://github.com/Microsoft/dotnet">Source Code on Github</a>.</p>

<p>Also pretty funky that they are offering a fully featured version of Visual Studio for free and shipping supported Linux and OS X runtimes.  Mono has give us this for a long time, but it is a nice that the gaps in Mono are going to be filled.</p>

<p>Lots of cool stuff coming in this area, such as the new Roslyn compiler (C# written in C# now not C++) which will open up some crazy compiler as a service meta-programming voodoo.  Mono is a C# implementation of C# and has again been ahead of its time in this space, but Roslyn seems to be generating some crazy buzz around code introspection and IDE features.</p>

<p>Most interesting thing in .NET space for me though is not any of this but is simply the F# language, which itself is written in F#, and has been the most pioneering and exciting language in the .NET space for a number of years due to its ability to innovate a add new powerful features with relative ease.</p>

<p>I hope that C# and .NET keep pushing forward and we don&rsquo;t see a Java-&lsquo;6-8&rsquo;-esk stagnation period. Doesn&rsquo;t look like it in week one anyway &ndash;> <a href="http://blogs.msdn.com/b/dotnet/archive/2014/11/20/one-week-of-open-source.aspx">&lsquo;One Week of Open Source&rsquo;</a>&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[William Gibson on 'Zero History' Interview]]></title>
    <link href="http://holsee.github.io/william-gibson-on-zero-history-interview/"/>
    <updated>2014-11-25T20:06:36+00:00</updated>
    <id>http://holsee.github.io/william-gibson-on-zero-history-interview</id>
    <content type="html"><![CDATA[<p>I listened to this on Sunday morning over a few nice coffees. Super interview&hellip; well worth the listen.</p>

<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/175814224&amp;color=6df2ff&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roman Numerals Elixir Kata]]></title>
    <link href="http://holsee.github.io/roman-numerals-elixir-kata/"/>
    <updated>2014-11-25T19:57:46+00:00</updated>
    <id>http://holsee.github.io/roman-numerals-elixir-kata</id>
    <content type="html"><![CDATA[<p>A fun little test driven kata which will introduce you to the basics of elixir.</p>

<div class='embed-video-container'><iframe src='http://www.youtube.com/embed/L_9pUkVSjcE' frameborder='0' allowfullscreen></iframe></div>


<p>A rule I try to follow for this is to try and keep my solution less than 20 lines of code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devlog: Rails Testing]]></title>
    <link href="http://holsee.github.io/devlog-rails-testing-for-zombies/"/>
    <updated>2014-11-24T00:21:45+00:00</updated>
    <id>http://holsee.github.io/devlog-rails-testing-for-zombies</id>
    <content type="html"><![CDATA[<p>Completed the <a href="https://www.codeschool.com/courses/rails-testing-for-zombies">Rails Testing <em>for zombies</em></a> courses on <a href="http://mbsy.co/8TZ9N">CodeSchool</a> tonight.</p>

<p>I liked it, I always found starting a new rails app always triggered my testing OCD and it was nice to get an insight into the strategies one can take to test a rails app without overdoing it.</p>

<p><img src="http://holsee.github.io/images/badges/rtfz_badge.png"></p>

<p>The course covers how to unit test and integration test your rails app with fixtures using TestUnit, so you are given a good idea of the tools at your disposal out of the box. As a well as that you are introduced to other popular testing gems which make your life easier such as <a href="https://github.com/thoughtbot/shoulda">Shoulda</a>, <a href="https://github.com/jnicklas/capybara">Capybara</a> and <a href="https://github.com/thoughtbot/factory_girl">FactoryGirl</a>.  I will touch on each of there briefly to give you a taste of what they are all about&hellip;</p>

<p>During the Unit Testing section you are introduced to <a href="https://github.com/thoughtbot/shoulda">Shoulda</a> gem which is described as an alternative syntax that is easy on the fingers and the eyes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserTest</span> <span class="o">&lt;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="n">should</span> <span class="n">have_many</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span>
</span><span class='line'>  <span class="n">should_not</span> <span class="n">allow_value</span><span class="p">(</span><span class="s2">&quot;blah&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">for</span><span class="p">(</span><span class="ss">:email</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As the course starts to dig into integration testing you are also introduced to <a href="https://github.com/jnicklas/capybara">Capybara</a> which provides a interaction based DSL for defining your integration tests that supports <a href="http://www.rubydoc.info/github/jnicklas/capybara#Drivers">multiple drivers</a>. Capybara tests when executing act like a headless browser of sorts giving you more control over the interactions with your site or api, following redirects more naturally for example which is something not handles by vanilla rails integration tests so well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">describe</span> <span class="s2">&quot;the signin process&quot;</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:feature</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span> <span class="ss">:each</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">User</span><span class="o">.</span><span class="n">make</span><span class="p">(</span><span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s1">&#39;user@example.com&#39;</span><span class="p">,</span> <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s1">&#39;password&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;signs me in&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">visit</span> <span class="s1">&#39;/sessions/new&#39;</span>
</span><span class='line'>    <span class="n">within</span><span class="p">(</span><span class="s2">&quot;#session&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">fill_in</span> <span class="s1">&#39;Email&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;user@example.com&#39;</span>
</span><span class='line'>      <span class="n">fill_in</span> <span class="s1">&#39;Password&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;password&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">click_button</span> <span class="s1">&#39;Sign in&#39;</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span> <span class="s1">&#39;Success&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lastly you are introduced to <a href="https://github.com/thoughtbot/factory_girl">FactoryGirl</a>, which is an alternative to using the built in test fixtures provided by rails out of the box.</p>

<!-- more -->


<p>There are numerous advantages to using a factories and specifically FactoryGirl instead of the built in rails fixture for your test data. You are provided with granular control over how the test data built and initialized not to mention the ability to create test data dynamically rather than maintaining a complex hand crafted static data set defined in yaml with magic ids providing the only basis for associations.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># This will guess the User class</span>
</span><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:user</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">first_name</span> <span class="s2">&quot;John&quot;</span>
</span><span class='line'>    <span class="n">last_name</span>  <span class="s2">&quot;Doe&quot;</span>
</span><span class='line'>    <span class="n">age</span> <span class="mi">27</span>
</span><span class='line'>    <span class="n">admin</span> <span class="kp">false</span>
</span><span class='line'>    <span class="n">association</span> <span class="ss">:roles</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># This will use the User class</span>
</span><span class='line'>    <span class="n">factory</span> <span class="ss">:admin</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">first_name</span> <span class="s2">&quot;Admin&quot;</span>
</span><span class='line'>      <span class="n">last_name</span>  <span class="s2">&quot;User&quot;</span>
</span><span class='line'>      <span class="n">admin</span>      <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:foo</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># some fields</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the <code>Factory</code> method directly will create an instance of an admin and insert it into the DB.</p>

<p>Beyond this basic example you are able to create new instances without inserting them into the database using the <code>build</code> method on the Factory as well as defining associations between entities as simple as adding <code>association :foo</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">test</span> <span class="s1">&#39;something to do with an admin&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">user</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:admin</span><span class="p">)</span>
</span><span class='line'>  <span class="n">assert</span> <span class="n">user</span><span class="o">.</span><span class="n">admin</span>
</span><span class='line'>  <span class="n">association</span> <span class="ss">:foo</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Insights into a good test strategy that I took away was to unit test the model and have a full suite of integration tests for everything else, which regards to the rails portion of your application anyway, keep your controllers and views logic free.</p>

<p>This is the approach that I had taken with a node.js app I have been writing, although I have been hand crafting the test data code I think I will look for something like FactoryGirl maybe <a href="https://www.npmjs.org/package/factory-girl">this javcascript port</a>.</p>

<p>So thats another course completed, and was well worth the time, not a bad way to spend some of your Sunday afternoon. I think I might do the <a href="https://www.codeschool.com/courses/try-r">Try R</a> course next or some <a href="https://www.codeschool.com/courses/warming-up-with-ember-js">Ember.js</a> which I can put to use in the near future as I am design a website for my wife to kick start a new business idea we have.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrated Tests Are A Scam]]></title>
    <link href="http://holsee.github.io/integrated-tests-are-a-scam/"/>
    <updated>2014-10-18T23:04:51+01:00</updated>
    <id>http://holsee.github.io/integrated-tests-are-a-scam</id>
    <content type="html"><![CDATA[<p>Found this gem in a tweet from <a href="https://twitter.com/david_whitney">@david_whitney</a>, and as he says the title is trolly but none the less is an excellent talk on automated testing.</p>

<div class="embed-video-container"><iframe src="http://player.vimeo.com/video/80533536 "></iframe></div>


<h3>Integrations Tests Lead to Bad Design</h3>

<ul>
<li>An interesting point is made (and I am paraphrasing) that the more integration tests we have the less design feedback we get, leading to sloppy design as we don&rsquo;t feel the same feedback &amp; design pressure&hellip;</li>
</ul>


<h3>What Failed and Where?</h3>

<ul>
<li>Integration tests may highlight failures, and the name of the test may go a long way to saying what failed, but pin pointing the actual location and reason for the failure is often lost in the generalization of the test itself.</li>
</ul>


<!-- more -->


<h3>The Systemic Growth of Integration Tests</h3>

<p>&ldquo;&hellip;[they&rsquo;re] like taking aspirin that make your headache worse&hellip;&rdquo;</p>

<ul>
<li>Given 3 components which each interact with each other, how many tests would we need to cover all code paths?</li>
</ul>


<table>
<thead>
<tr>
<th></th>
<th> Component  </th>
<th> # Paths  </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>     A      </td>
<td>     3    </td>
</tr>
<tr>
<td></td>
<td>     B      </td>
<td>     5    </td>
</tr>
<tr>
<td></td>
<td>     C      </td>
<td>     7    </td>
</tr>
</tbody>
</table>


<p>3 x 5 x 7 = 105 Integration Tests*</p>

<ul>
<li>Add a 4th subsystem, as a result of a refactoring, with 2 paths removed from C moved into Component D:</li>
</ul>


<table>
<thead>
<tr>
<th></th>
<th> Component  </th>
<th> # Paths  </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>     A      </td>
<td>     3    </td>
</tr>
<tr>
<td></td>
<td>     B      </td>
<td>     5    </td>
</tr>
<tr>
<td></td>
<td>     C      </td>
<td>     5    </td>
</tr>
<tr>
<td></td>
<td>     D      </td>
<td>     2    </td>
</tr>
</tbody>
</table>


<p>3 x 5 x 5 x 2 = 150 Integration Tests*</p>

<p>*At Least as to cover all code paths.</p>

<ul>
<li>This is an example of <em>negative design pressure</em>, specifically in this instance to refactoring, which itself is important to obtaining good design.</li>
<li>Resulting in another 45 tests being created and a on going cost of the time it will take to execute these tests.</li>
<li>Not to mention the time it takes to run these tests hardly lends itself to a rapid Red Green Refactor cycle that would be possible with more isolated tests.</li>
</ul>


<h3>The Solution</h3>

<ul>
<li><p>Design to Contracts
&mdash; If each Component operates against a contract, and the interactions between each component are clearly identified through design then come implementation we will be able isolate and ensure each component behaves correctly given the contract is upheld on both ends.</p></li>
<li><p>Tests Subsystems in isolation
&mdash; Isolation can be achieved through the use of Test Doubles or Mocks, to ensure each interaction with other components follow the contract under each of the specified scenarios.</p></li>
</ul>


<p><em>The talk goes into much more detail and is crammed with practical advice&hellip; GO WATCH and make the world a better place.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP Status Code Decision Diagram]]></title>
    <link href="http://holsee.github.io/http-status-code-decision-diagram/"/>
    <updated>2014-10-18T22:57:56+01:00</updated>
    <id>http://holsee.github.io/http-status-code-decision-diagram</id>
    <content type="html"><![CDATA[<p>The best HTTP Status Code decision diagram I have seen to date.
Source: <a href="https://raw.githubusercontent.com/for-GET/http-decision-diagram/master/httpdd.png">https://raw.githubusercontent.com/for-GET/http-decision-diagram/master/httpdd.png</a></p>

<p><a href="https://raw.githubusercontent.com/for-GET/http-decision-diagram/master/httpdd.png"><img class="center" src="https://raw.githubusercontent.com/for-GET/http-decision-diagram/master/httpdd.png"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devlog: Ruby Bits 1 &amp; 2]]></title>
    <link href="http://holsee.github.io/devlog-ruby-bits-1-and-2/"/>
    <updated>2014-10-18T22:22:10+01:00</updated>
    <id>http://holsee.github.io/devlog-ruby-bits-1-and-2</id>
    <content type="html"><![CDATA[<p>Completed the <a href="https://www.codeschool.com/courses/ruby-bits">RUBY BITS</a> courses on <a href="http://mbsy.co/8TZ9N">CodeSchool</a>. Again&hellip; I was impressed with the content, as a casual rubyist I got plenty out of doing this.</p>

<p>I really enjoyed this course, I took away a lot of useful idioms which I will put to good use (when I get the chance).</p>

<p><img class="center" src="http://holsee.github.io/images/badges/ruby-bits_badge.png" width="538" height="178"></p>

<p>The meta-programming a DSL creation in <a href="https://www.codeschool.com/courses/ruby-bits-part-2">RUBY BITS part 2</a> were great&hellip; adding methods to classes dynamically is pretty bad-ass for drying up code.</p>

<p><em>I always wanted default method implementation on interfaces in C#, dunno why I brought this up other than in Ruby that would never ever be an issue with the features you have at your disposal&hellip; very few languages lead to as much developer happiness.</em></p>

<p><img class="center" src="http://holsee.github.io/images/badges/ruby-bits-2_badge.png" width="538" height="178"></p>

<p>Just one of those languages I would love to write everyday if I could.
Moving onto <a href="https://www.codeschool.com/courses/rails-testing-for-zombies">Rails Testing <em>for zombies</em></a> course next&hellip;</p>

<p>&hellip;that said <a href="http://elixir-lang.org">Elixir has hit v1.x</a> and the Dave Thomas <a href="https://pragprog.com/book/elixir/programming-elixir">&ldquo;Programming Elixir&rdquo;</a> book has been released, so that will most likely eat up the next month or two of my life.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tunes: Mesterházy - Körzeti Varázslóhivatal (2002)]]></title>
    <link href="http://holsee.github.io/tunes-mesterhazy-korzeti-varazslohivatal-2002/"/>
    <updated>2014-10-09T20:36:35+01:00</updated>
    <id>http://holsee.github.io/tunes-mesterhazy-korzeti-varazslohivatal-2002</id>
    <content type="html"><![CDATA[<iframe width="100%" height="60" src="//www.mixcloud.com/widget/iframe/?feed=http%3A%2F%2Fwww.mixcloud.com%2Fmesterhazy%2Fmesterh%25C3%25A1zy-k%25C3%25B6rzeti-var%25C3%25A1zsl%25C3%25B3hivatal-2002%2F&amp;mini=1&amp;embed_uuid=5557789f-2af5-4be6-a5c8-69a92088366a&amp;replace=0&amp;light=1&amp;hide_artwork=1&amp;embed_type=widget_standard&amp;hide_tracklist=1" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tunes: Minimal Mondays | 04 | Hooked On]]></title>
    <link href="http://holsee.github.io/tunes-minimal-mondays-%7C-04-%7C-hooked-on/"/>
    <updated>2014-10-09T10:49:47+01:00</updated>
    <id>http://holsee.github.io/tunes-minimal-mondays-|-04-|-hooked-on</id>
    <content type="html"><![CDATA[<p>My IDM binge continues&hellip;.</p>

<iframe width="100%" height="60" src="//www.mixcloud.com/widget/iframe/?feed=http%3A%2F%2Fwww.mixcloud.com%2FMinimalMondays%2Fminimal-mondays-04-hooked-on%2F&amp;mini=1&amp;embed_uuid=0a231047-3880-4264-a801-908226f94943&amp;replace=0&amp;light=1&amp;embed_type=widget_standard&amp;hide_tracklist=1" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devlog: Real Time Web with Node.js]]></title>
    <link href="http://holsee.github.io/devlog-real-time-web-with-node-dot-js/"/>
    <updated>2014-10-07T22:00:58+01:00</updated>
    <id>http://holsee.github.io/devlog-real-time-web-with-node-dot-js</id>
    <content type="html"><![CDATA[<p>Completed the <a href="">Real Time Web with Node.js course on CodeSchool</a></p>

<p><img src="http://holsee.github.io/images/badges/rtnode_badge.png"></p>

<p>Another impeccable course, produced to the usual  high standards which I have come to expect with each and every CodeSchool module. Go give these guys money and do a few courses, worth every penny.</p>

<p>I have completed a couple of node.js projects to date and am currently working on a biggin&#8217;, so I didn&rsquo;t find this course very challenging, but I did find it fun, another great jingle and lots of great content.</p>

<p>The examples go a long way to show how much you can do with so little code, walking students through using <a href="http://socket.io">socket.io</a> and <a href="http://redis.io">redis</a> to build a chat client and a Q&amp;A system.</p>

<p>Something I learned was how to use redis effectively, the course got me started and provided useful tips such as limiting size of a list to 10 items for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">redis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;redis&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">client</span> <span class="o">=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">createClient</span><span class="p">();</span>
</span><span class='line'><span class="c1">//... on last meeting submitted ...</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">meeting</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">lastMeeting</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use LPUSH &amp; LTRIM in tandem</span>
</span><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">lpush</span><span class="p">(</span><span class="s1">&#39;recent_meetings&#39;</span><span class="p">,</span> <span class="nx">meeting</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">reply</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">client</span><span class="p">.</span><span class="nx">ltrim</span><span class="p">(</span><span class="s1">&#39;recent_meetings&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span> <span class="c1">// 10 Items Max</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>and for good measure,
<a href="devlog-a-sip-of-coffeescript">using my new CoffeeScript skills</a>, the same thing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">redis = </span><span class="nx">require</span><span class="p">(</span><span class="s">&quot;redis&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">client = </span><span class="nx">redis</span><span class="p">.</span><span class="nx">createClient</span><span class="p">()</span>
</span><span class='line'><span class="c1">#... on last meeting submitted ...</span>
</span><span class='line'><span class="nv">meeting = </span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span> <span class="nx">lastMeeting</span>
</span><span class='line'>
</span><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">lpush</span> <span class="s">&#39;recent_meetings&#39;</span><span class="p">,</span> <span class="nx">meeting</span><span class="p">,</span> <span class="nf">(err, reply) -&gt;</span>
</span><span class='line'>  <span class="nx">client</span><span class="p">.</span><span class="nx">ltrim</span><span class="p">(</span><span class="s">&#39;recent_meetings&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span> <span class="c1"># 10 Items Max</span>
</span></code></pre></td></tr></table></div></figure>


<p>P.S. This gif of Eric Allam &amp; Gregg Pollack cracks me up no end&hellip;</p>

<p><img class="center" src="http://courseware.codeschool.com/images/blog/node-mind-blown.gif" width="800" height="800"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devlog: A Sip of CoffeeScript]]></title>
    <link href="http://holsee.github.io/devlog-a-sip-of-coffeescript/"/>
    <updated>2014-10-06T23:21:12+01:00</updated>
    <id>http://holsee.github.io/devlog-a-sip-of-coffeescript</id>
    <content type="html"><![CDATA[<p>Completed the <a href="https://www.codeschool.com/courses/coffeescript">CoffeeScript course on CodeSchool</a>.</p>

<p><img class="center" src="http://holsee.github.io/images/badges/coffeescript_badge.png"></p>

<p>I love these list comprehensions&hellip; I don&rsquo;t think I will be writing straight JS for a while.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Eat lunch.</span>
</span><span class='line'><span class="nx">eat</span> <span class="nx">food</span> <span class="k">for</span> <span class="nx">food</span> <span class="k">in</span> <span class="p">[</span><span class="s">&#39;toast&#39;</span><span class="p">,</span> <span class="s">&#39;cheese&#39;</span><span class="p">,</span> <span class="s">&#39;wine&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Fine five course dining.</span>
</span><span class='line'><span class="nv">courses = </span><span class="p">[</span><span class="s">&#39;greens&#39;</span><span class="p">,</span> <span class="s">&#39;caviar&#39;</span><span class="p">,</span> <span class="s">&#39;truffles&#39;</span><span class="p">,</span> <span class="s">&#39;roast&#39;</span><span class="p">,</span> <span class="s">&#39;cake&#39;</span><span class="p">]</span>
</span><span class='line'><span class="nx">menu</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">dish</span> <span class="k">for</span> <span class="nx">dish</span><span class="p">,</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">courses</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Health conscious meal.</span>
</span><span class='line'><span class="nv">foods = </span><span class="p">[</span><span class="s">&#39;broccoli&#39;</span><span class="p">,</span> <span class="s">&#39;spinach&#39;</span><span class="p">,</span> <span class="s">&#39;chocolate&#39;</span><span class="p">]</span>
</span><span class='line'><span class="nx">eat</span> <span class="nx">food</span> <span class="k">for</span> <span class="nx">food</span> <span class="k">in</span> <span class="nx">foods</span> <span class="k">when</span> <span class="nx">food</span> <span class="o">isnt</span> <span class="s">&#39;chocolate&#39;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
